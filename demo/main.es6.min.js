"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _React = React,
    Component = _React.Component;
var _ReactDOM = ReactDOM,
    render = _ReactDOM.render;
var _PxReact = PxReact,
    AppHeader = _PxReact.AppHeader,
    AppNav = _PxReact.AppNav,
    Button = _PxReact.Button,
    Card = _PxReact.Card,
    Drawer = _PxReact.Drawer,
    Navbar = _PxReact.Navbar,
    KeyValuePair = _PxReact.KeyValuePair,
    Grid = _PxReact.Grid,
    Gauge = _PxReact.Gauge,
    Layout = _PxReact.Layout,
    Spinner = _PxReact.Spinner,
    ProgressBar = _PxReact.ProgressBar,
    Theme = _PxReact.Theme;


var dashboardData = {
  title: 'Predix Sample Application',
  navItems: [{ "path": "dashboard", "icon": "px-nav:home", "label": "Dashboard" }, { "path": "details", "icon": "px-nav:list", "label": "Details" }, { "path": "alerts", "icon": "px-nav:home", "label": "Alerts" }],
  keyVals: [{ label: 'New Alerts', value: 21 }, { label: 'Utilization', value: '70', uom: '%' }, { label: 'Faults', value: 3 }, { label: 'Output', value: 53, uom: 'mw' }],
  cards: [{ title: 'Card 1', children: [React.createElement(
      "div",
      null,
      "Lorem ipsum dolor sit"
    )] }, { title: 'Card 2', children: [React.createElement(
      "div",
      null,
      "Lorem ipsum dolor sit"
    )] }, { title: 'Card 3', children: [React.createElement(
      "div",
      null,
      "Lorem ipsum dolor sit"
    )] }]
};

var App = function (_Component) {
  _inherits(App, _Component);

  function App(props) {
    _classCallCheck(this, App);

    return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
  }

  _createClass(App, [{
    key: "render",
    value: function render() {
      return React.createElement(
        Theme,
        { dark: true },
        React.createElement(
          AppHeader,
          {
            title: dashboardData.title,
            items: dashboardData.navItems },
          React.createElement(
            Card,
            { headerText: "West Coast Fleet" },
            React.createElement(
              Layout,
              { container: true, center: true, middle: true, wrap: true },
              dashboardData.keyVals.map(function (item, index) {
                return React.createElement(
                  Layout,
                  { item: true, key: index, xs: 2, md: 4, xl: 6 },
                  React.createElement(KeyValuePair, {
                    label: item.label,
                    uom: item.uom,
                    value: item.value,
                    size: "beta" })
                );
              })
            )
          ),
          dashboardData.cards && dashboardData.cards.map(function (card, index) {
            return React.createElement(
              Card,
              { key: index,
                headerText: card.title },
              card.children
            );
          })
        )
      );
    }
  }]);

  return App;
}(Component);

render(React.createElement(App, null), document.querySelector('#app'));